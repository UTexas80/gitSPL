plot(eq)
ret
ret <- ret['2009-06-02/2010-09-07']
ret
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("SPL.AX")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
# Step 2: Create your indicator
dvi <- DVI(Cl(SPL))
# dfDVI <- data.frame(dvi)
# Convert indicartor to a tibble
dvi <- as_data_frame(dvi)
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
# Step 4: The trading rules/equity curve
ret <- ROC(Cl(SPL))*sig
ret <- ret['2009-06-02/2010-09-07']
ret
ret <- ROC(Cl(SPL))*sig
ret <- ret['2009-06-02/2010-09-07']
ret
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
# Step 4: The trading rules/equity curve
ret <- ROC(Cl(GSPC))*sig
ret <- ret['2009-06-02/2010-09-07']
eq <- exp(cumsum(ret))
plot(eq)
# Step 5: Evaluate strategy performance
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("SPL.AX")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
# Step 2: Create your indicator
dvi <- DVI(Cl(SPL))
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
sig <- Lag(ifelse(dvi[["dvi"]] < 0.5, 1, -1))
sig <- Lag(ifelse(dvi[["dvi"]]  < 0.5, 1, -1))
sig <- Lag(ifelse(dvi["dvi"]  < 0.5, 1, -1))
sig <- Lag(ifelse(dvi["dvi"]  < 0.5, 1, -1))
sig
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
sig <- Lag(ifelse(dvi["dvi"]  < 0.5, 1, -1))
sig
ret <- ROC(Cl(GSPC))*sig
ret <- ROC(Cl(SPL))*sig
ret <- ROC(Cl(SPL))*sig
sig <- Lag(ifelse(dvi["dvi"]  < 0.5, 1, -1))
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
sig
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("SPL.AX")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
# Step 2: Create your indicator
dvi <- DVI(Cl(SPL))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi["dvi"]  < 0.5, 1, -1))
sig
dvi <- DVI(Cl(SPL))
dvi
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
dvi
getSymbols("^GSPC")
GSPC
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("SPL.AX")
SPL<-SPL[complete.cases(SPL),]
SPL
dvi <- DVI(Cl(SPL))
dvi
View(dvi)
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
dvi
dvi <- DVI(Cl(SPL.AX))
dvi <- as_data_frame(dvi)
dvi
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
dvi
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("SPL.AX")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
# Step 2: Create your indicator
dvi <- DVI(Cl(SPL))
# Convert indicartor to a tibble
dvi <- as_data_frame(dvi)
dvi
getSymbols("SPL.AX", from="1900-01-01")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
aa = dvi.analysis(Cl(SPL["/2009"]), lags=seq(1,8), normalize=T, file.path="dvi.png")
getSymbols("SPL.AX", from="1900-01-01")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
aa = dvi.analysis(Cl(SPL["/2009"]), lags=seq(1,8), normalize=T, file.path="dvi.png")
require(quantmod)
prepare.indicator = function(close, indicator, roc.n, normalize=FALSE, func=mean) {
rets = ROC(close, type="discrete", n=roc.n)
if(normalize) {
# Normalize the returns to daily
rets = ((1 + rets) ^ (1/roc.n)) - 1
}
mm = merge(na.exclude(lag(indicator, k=roc.n)), na.exclude(rets), all=F)
dd = as.numeric(mm[,1])
# Map the indicator values into the tenth intervals
ee = ceiling(dd*10)
ee = ifelse(ee == 0, 1, ee)
# Create the factors
ff = factor(ee, labels=as.character(seq(0.1, 1, 0.1)))
# Split the returns according to the factors
gg = split(as.numeric(mm[,2]), ff)
yy = sapply(gg, func)
return(list(raw.res=gg, res=yy, rets=rets))
}
dvi.analysis = function(close, lags=c(5), normalize=FALSE, file.path, do.plot=TRUE, width=800, height=1200, func=mean) {
# Redirect the plot if necessary
if(do.plot && !missing(file.path)) {
png(filename=file.path, width=width, height=height, units='px', pointsize=12, bg='white')
}
if(length(lags) %% 2 == 0) {
par(mfrow=c(length(lags) / 2, 2))
} else {
par(mfrow=c(length(lags), 1))
}
ind = TTR:::DVI(close)[,3]
res = list()
raw.res = list()
rets = list()
for(ll in lags) {
xx = prepare.indicator(close, ind, roc.n=ll, normalize=normalize, func=func)
yy = xx$res
barplot(
yy,
ylim=c(-max(abs(yy)), max(abs(yy))),
col=ifelse(yy<0, "darkblue", "red"),
main=paste(as.character(ll), "-day returns", sep=""),
xlab="DVI level",
ylab="Expected return")
res[[as.character(ll)]] = xx$res
raw.res[[as.character(ll)]] = xx$raw.res
rets[[as.character(ll)]] = xx$rets
# return(list(gg=gg, ff=ff, ee=ee, dd=dd))
}
# Restore the plot output
if(do.plot && !missing(file.path)) {
dev.off();
}
return(list(res=res, raw.res=raw.res, rets=rets))
}
dvi.analysis = function(close, lags=c(5), normalize=FALSE, file.path, do.plot=TRUE, width=800, height=1200, func=mean) {
# Redirect the plot if necessary
if(do.plot && !missing(file.path)) {
png(filename=file.path, width=width, height=height, units='px', pointsize=12, bg='white')
}
if(length(lags) %% 2 == 0) {
par(mfrow=c(length(lags) / 2, 2))
} else {
par(mfrow=c(length(lags), 1))
}
ind = TTR:::DVI(close)[,3]
res = list()
raw.res = list()
rets = list()
for(ll in lags) {
xx = prepare.indicator(close, ind, roc.n=ll, normalize=normalize, func=func)
yy = xx$res
barplot(
yy,
ylim=c(-max(abs(yy)), max(abs(yy))),
col=ifelse(yy<0, "darkblue", "red"),
main=paste(as.character(ll), "-day returns", sep=""),
xlab="DVI level",
ylab="Expected return")
res[[as.character(ll)]] = xx$res
raw.res[[as.character(ll)]] = xx$raw.res
rets[[as.character(ll)]] = xx$rets
# return(list(gg=gg, ff=ff, ee=ee, dd=dd))
}
# Restore the plot output
if(do.plot && !missing(file.path)) {
dev.off();
}
return(list(res=res, raw.res=raw.res, rets=rets))
}
getSymbols("SPL.AX", from="1900-01-01")
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
aa = dvi.analysis(Cl(SPL["/2009"]), lags=seq(1,8), normalize=T, file.path="dvi.png")
install.packages(c("Matrix", "Matrix.utils", "matrixcalc"))
install.packages("matrixcalc")
?DVI
dvi <- DVI(Cl(SPL$adjusted))
?cl
?Cl
Cl(SPL)
DVI(Cl(SPL))
DVI(Cl(GSPC))
DVI(Cl(SPL.AX))
DVI(Cl(SPL))
View(SPL.AX)
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
# Step 4: The trading rules/equity curve
ret <- ROC(Cl(GSPC))*sig
ret <- ret['2009-06-02/2010-09-07']
eq <- exp(cumsum(ret))
plot(eq)
# Step 5: Evaluate strategy performance
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
dvi
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
sig
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
# Step 4: The trading rules/equity curve
ret <- ROC(Cl(GSPC))*sig
ret
getSymbols("^GSPC")
View(GSPC)
require(quantmod)
require(PerformanceAnalytics)
# Step 1: Get the data
getSymbols("^GSPC")
# Step 2: Create your indicator
dvi <- DVI(Cl(GSPC))
# Step 3: Construct your trading rule
sig <- Lag(ifelse(dvi$dvi < 0.5, 1, -1))
# Step 4: The trading rules/equity curve
ret <- ROC(Cl(GSPC))*sig
ret
install.packages("editheme")
install.packages("githubinstall")
gh_install_packages("fkeck/editheme")
?gh_install_packages
library(githubinstall)
?gh_install_packages
gh_install_packages("fkeck/editheme")
library(devtools)
devtools::install_github("ropenscilabs/styles")
devtools::install_github("fkeck/editheme")
library(githubinstall)
library(devtools)
?gh_install_packages
devtools::install_github("ropenscilabs/styles")
devtools::install_github("fkeck/editheme")
library(devtools)
?gh_install_packages
devtools::install_github("ropenscilabs/styles")
devtools::install_github("fkeck/editheme")
install.packages("glmnet")
# Checks if quantmod is installed, installs it if unavailable,
# loads it and turns off needless warning messages
if(!("quantmod" %in% as.character(installed.packages()[,1])))
{ install.packages("quantmod") }
library(quantmod)
# Checks if quantmod is installed, installs it if unavailable,
# loads it and turns off needless warning messages
if(!("quantmod" %in% as.character(installed.packages()[,1])))
{ install.packages("quantmod") }
library(quantmod)
options("getSymbols.warning4.0"=FALSE,
"getSymbols.auto.assign"=FALSE)
# Loads S&P 500 ETF data, stores closing prices as a vector
SPY <- suppressWarnings(
getSymbols(c("SPY"),from = "2012-01-01"))
SPY <- as.numeric(SPY$SPY.Close)[1:987]
# Set Random Seed
set.seed(123)
# Create Time Index
t <- 1:(length(SPY)-1)
# Tradable Capital Vector
Vt <- c(rep(10000, length(t)))
# Benchmark Return Series
Rb <- rep(NA, length(t))
for(i in 2:length(t)) { Rb[i] <- (SPY[i] / SPY[i - 1]) - 1 }
# Benchmark Equity Curve
Eb <- rep(NA, length(t))
Eb[1] <- Vt[1]
for(i in 2:length(t)) { Eb[i] <- Eb[i-1] * (1 + Rb[i]) }
# Randomly Simulated Return Series 1
Rt <- rep(NA, length(t))
for(i in 2:length(t)){
Rt[i] <- Rb[i] + rnorm(n = 1,
mean = 0.24/length(t),
sd = 2.5 * sd(Rb, na.rm = TRUE))
}
# Randomly Simulated Return Series 2
Rt2 <- rep(NA, length(t))
for(i in 2:length(t)){
Rt2[i] <- Rb[i] + rnorm(n = 1,
mean = 0.02/length(t),
sd = .75 * sd(Rb, na.rm = TRUE))
}
# Randomly Simulated Equity Curve 1
Et <- rep(NA, length(t))
Et <- Vt[1]
for(i in 2:length(t)) { Et[i] <- Et[i-1] * (1 + Rt[i]) }
# Randomly Simulated Equity Curve 2
Et2 <- rep(NA, length(t))
Et2 <- Vt[1]
for(i in 2:length(t)) { Et2[i] <- Et2[i-1] * (1 + Rt2[i]) }
# Plot of Et1 against the SPY Portfolio
plot(y = Et, x = t, type = "l", col = 1,
xlab = "Time",
ylab= "Equity ($)",
main = "Figure 1â3: Randomly Generated Equity Curves")
grid()
abline(h = 10000)
lines(y = Et2, x = t, col = 2)
lines(y = Eb, x = t, col = 8)
legend(x = "topleft", col = c(1,2,8), lwd = 2, legend = c("Curve 1",
"Curve 2",
"SPY"))
# Use na.rm = TRUE to ignore NAs at position 1 in return series
SR <- mean(Rt, na.rm = TRUE) / sd(Rt, na.rm = TRUE)
SR2 <- mean(Rt2, na.rm = TRUE) / sd(Rt2, na.rm = TRUE)
SRb <- mean(Rb, na.rm = TRUE) / sd(Rb, na.rm = TRUE)
plot(y = Et, x = t, type = "l", col = 1,
xlab = "",
ylab= "Equity ($)",
main = "Figure 1-4: Sharpe Ratios")
grid()
abline(h = 10000)
lines(y = Et2, x = t, col = 2)
lines(y = Eb, x = t, col = 8)
legend(x = "topleft", col = c(1,2,8), lwd = 2,
legend = c(paste0("SR = ", round(SR, 3)),
paste0("SR = ", round(SR2, 3)),
paste0("SR = ", round(SRb, 3))))
time <- length(curve)
v <- rep(NA, (time * (time - 1)) / 2)
k <- 1
for(i in 1:(length(curve)-1)){
for(j in (i+1):length(curve)){
v[k] <- curve[i] - curve[j]
k <- k + 1
}
}
m <- rep(NA, length(n))
for(i in 1:n){
m[i] <- max(v)
v[which.max(v)] <- -Inf
}
return(m)
NPMD <- (Et[length(Et)] - Vt[1]) / MD(Et)
Burke <- (Et[length(Et)] - Vt[1]) /
sqrt((1/length(Et)) * sum(MD(Et, n = round(length(Et) / 20))^2))
install.packages("rmarkdown")
install.packages('ProjectTemplate')
install.packages('caTools')
library(caTools)                                                                # Contains several basic utility functions including: moving (rolling, running) window statistic functions,
library(tidyquant)                                                              # Loads tidyquant, tidyverse, lubridate, quantmod, TTR, and xts
library(TTR)                                                                    # Technical Trading Rules package
# Date Processing --------------------------------------------------------------
#end <- ymd("2017-10-30")
end <-  today()
from <- today() - years(10)
start <- end - weeks(52)
# SPL Processing ---------------------------------------------------------------
SPL <- tq_get("SPL.AX")                                                         # Get SPL Stock Prices
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
date <- SPL$date                                                                # Create date variable
# Example 1: Annual Returns ----------------------------------------------------
tblRetAnnual <- SPL %>%
tq_transmute(select     = close,
mutate_fun = periodReturn,
period     = "yearly",
type       = "arithmetic")
# Example 2: Use tq_mutate_xy to use functions with two columns required--------
# SPL %>%
#  tq_mutate_xy(x = close, y = volume, mutate_fun = EVWMA,
#               col_rename = "EVWMA")
# Example 2B: Getting Daily Log Returns-----------------------------------------
tblRetDailyLog <- SPL %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type       = "log",
col_rename = "daily.returns")
# Example 3: MACD to Visualize Moving Average Convergence Divergence------------
tblMACD <- SPL %>%
tq_mutate(select     = close,
mutate_fun = MACD,
nFast      = 12,
nSlow      = 26,
nSig       = 9,
maType     = SMA) %>%
mutate(diff = macd - signal) %>%
select(-(open:volume))
# Example 4: Max and Min Price for Each Quarter---------------------------------
tblRetMaxByQtr <- SPL %>%
tq_transmute(select     = adjusted,
mutate_fun = apply.quarterly,
FUN        = max,
col_rename = "max.close") %>%
mutate(year.qtr = paste0(year(date), "-Q", quarter(date))) %>%
select(-date)
tblRetMinByQtr <- SPL %>%
tq_transmute(select     = adjusted,
mutate_fun = apply.quarterly,
FUN        = min,
col_rename = "min.close") %>%
mutate(year.qtr = paste0(year(date), "-Q", quarter(date))) %>%
select(-date)
tblRetByQtr <- left_join(tblRetMaxByQtr, tblRetMinByQtr,
by = c("year.qtr" = "year.qtr"))
# Example 5: Chaikan AD --------------------------------------------------------
# tblchaikanAD <- SPL %>%
#   tq_transmute(
#                mutate_fun = chaikinAD,
#                HLC = high:low:close,
#                volume = volume
#                )
# Delete Table NA --------------------------------------------------------------
tblMACD <-tblMACD[complete.cases(tblMACD),]                                      # Delete MACD NA
# Reformat Table ---------------------------------------------------------------
# tblchaikanAD
tblMACD <- data.frame("spl",tblMACD)                                            # Create MACD Table
tblRetAnnual <- data.frame("spl",tblRetAnnual)                                  # Create Annual Returns Table
tblRetDailyLog <- data.frame("spl",tblRetDailyLog)                              # Create Daily Log Returns Table
tblRetMaxByQtr <- data.frame("spl",tblRetMaxByQtr)                              # Create Max Returns by Quarter Table
tblRetMinByQtr <- data.frame("spl",tblRetMinByQtr)                              # Create Min Returns by Quarter Table
tblRetByQtr <- data.frame("spl",tblRetByQtr)                                    # Create Min Returns by Quarter Table
# Rename columns ---------------------------------------------------------------
colnames(tblMACD) <- c( "symbol", "date", "adjusted", "macd", "signal","diff")  # Rename tblMACD Table Columns
colnames(tblRetAnnual) <- c( "symbol", "date", "retAnnual")                     # Rename tblRetAnnual Table Columns
colnames(tblRetDailyLog) <- c( "symbol", "date", "retDaily")                    # Rename tblDailyLogReturns Table Columns
colnames(tblRetMaxByQtr) <- c( "symbol", "close", "dateYrQtr")                  # Rename tblRetMaxByQtr Table Columns
colnames(tblRetMinByQtr) <- c( "symbol", "close", "dateYrQtr")                  # Rename tblRetMinByQtr Table Columns
colnames(tblRetByQtr) <- c( "symbol", "closeMax", "dateYrQtr", "closeMin")      # Rename tblRetByQtr Table Columns
# Reorder  columns -------------------------------------------------------------
tblMACD <- tblMACD[, c(2, 1, 3, 4, 5, 6)]                                       # Reorder tblMACD columns
tblRetAnnual <- tblRetAnnual[, c(2, 1, 3)]                                      # Reorder tblRetAnnual columns
tblRetDailyLog <- tblRetDailyLog[, c(2, 1, 3)]                                  # Reorder tblDailyLogReturns columns
tblRetMaxByQtr <- tblRetMaxByQtr[, c(3, 1, 2)]                                  # Reorder tblRetMaxByQtr columns
tblRetMinByQtr <- tblRetMinByQtr[, c(3, 1, 2)]                                  # Reorder tblRetMinByQtr columns
tblRetByQtr <- tblRetByQtr[, c(3, 1, 2, 4)]                                     # Reorder tblRetByQtr columns
library(caTools)                                                                # Contains several basic utility functions including: moving (rolling, running) window statistic functions,
library(tidyquant)                                                              # Loads tidyquant, tidyverse, lubridate, quantmod, TTR, and xts
library(TTR)
install.packages(c("backports", "bizdays", "broom", "checkmate", "crayon", "curl", "data.table", "devtools", "digest", "dplyr", "FinancialInstrument", "foreach", "forecast", "git2r", "glmnet", "glue", "gridExtra", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "knitr", "lambda.r", "lazyeval", "lintr", "lme4", "lubridate", "Matrix", "MatrixCorrelation", "openssl", "padr", "plotrix", "pracma", "psych", "purrr", "quantmod", "Rcpp", "RcppArmadillo", "RcppEigen", "reshape2", "rex", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "slam", "stringi", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "timeSeries", "tm", "TTR", "viridis", "withr", "XLConnect", "XLConnectJars", "xml2", "xray", "xts", "yaml", "zoo"))
install.packages("xml2")
install.packages("PerformanceAnalytics")
install.packages("FinancialInstrument")
install.packages("foreach")
install.packages(c("quantstrat", "knitr"))
setwd("/users/gfalk/OneDrive - University of Georgia/SPL")
library('ProjectTemplate')
create.project('rprojectSPL')
