dump(list = c("invalid"), "invalid.R")
# Clears R environment except for path variables and functions
rm( list = setdiff( ls(), c(" rootdir", "functiondir", "datadir", "quandl_get", "column_names")))
gc()
####
#### 2.5
setwd(datadir)
S <- sub(".csv", "", list.files())
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
####
#### 2.6 update method with quandl_get function
# To prove that this works, at this point you might want to delete some rows in
# any of the csv files under stockdata.
# force system time to "EST"
Sys.setenv(TZ="EST")
currentTime <- Sys.time()
for(i in S){
# Store greatest date within DATA for symbol i
maxdate <- max(index(DATA[[i]])[nrow(DATA[[i]])])
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 40.25){
# Push the maxdate forward one day
maxdate <- strptime(maxdate, "%Y-%m-%d") + 86400
weekend <- sum(c("Saturday", "Sunday") %in%
weekdays(c(maxdate, currentTime))) == 2
if(!weekend){
# if !weekend then start_date for quandl = maxdate
start_date = as.character(maxdate)
df <- quandl_get(i, start_date = start_date)
colnames(df) <- column_names
if(!is.null(df)){
if(all(!is.na(df)) & nrow(df) > 0){
# df <- df[nrow(df):1] # not needed, is type = "zoo"
# write csv file with new data, duplicates might exist
write.zoo(df, file = paste0(i, ".csv"),
row.names = FALSE, col.names = FALSE, append = TRUE)
DATA[[i]] <- rbind(DATA[[i]], df)
# just in case, sort by index. Remove duplicates?
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
}
}
}
}
###########################################
### This script is a one-piece runnable ###
### example constructed from code       ###
### using Quandl API instead of yahoo!  ###
### It is Windows and	UNIX	        ###
### compatible.				            ###
###########################################
# The goal is use Quandl API instead of Yahoo! API
# for downloading and Yahoo! YQL for updating
# it is intended to reproduce the same same steps
# as stated on the text book.
# The end result is a DATA file similar to
# listings in Chapter 2
# Quandl https://www.quandl.com/
# Quandl API r https://www.quandl.com/tools/r
# Quandl doocs https://www.quandl.com/tools/r
# Quandl has the capability of downloading data frames as zoo objects
# therefore, we will re-name each column after downloading and writing as csv
# set root as working directory, change it to your wd
setwd("~")
# delete AutoTrading folder if exists. We will start fresh
if(file.exists("./AutoTrading")) {
unlink("./AutoTrading", recursive=TRUE)
}
# create AutoTrading folders
dir.create("./AutoTrading")
dir.create("./AutoTrading/stockdata")
dir.create("./Autotrading/functions")
####Listing 2.1: Setting Path Variables
rootdir <- "~/Autotrading"
datadir <- "~/AutoTrading/stockdata/"
functiondir <- "~/AutoTrading/functions/"
####
####Listing 2.2 modified for quandl instead of Yahoo!
#insert your Quandl APO here
require(Quandl)
quandl_api = "ZtvE2BmA_dxMQvnn_mWU"
#add my key to Quandl API
Quandl.api_key(quandl_api)
# this function downloads the columns needed as from start_date
quandl_get <- function(sym, start_date = "2017-01-01") {
require(devtools)
require(Quandl)
# create a vector with all lines
tryCatch(Quandl(c(
paste0("WIKI/", sym, ".8"),  #  Adj. Open
paste0("WIKI/", sym, ".9"),  # Adj. High
paste0("WIKI/", sym, ".10"), # Adj. Low
paste0("WIKI/", sym, ".11"), # Adj. Close
paste0("WIKI/", sym, ".12")), # Adj. Volume
start_date = start_date,
type = "zoo"
))
}
####
# save quandl.R file in /functions with 'quandl'_get function
setwd(libdir)
dump(list = c("quandl_get"), "quandl.R")
#S <- read.csv(url, header = FALSE, stringsAsFactors=F)[,1]
####Listing 2.3: List of S&P 500 Stocks####
# Up-to-date at time of writing
url <- "http://trading.chrisconlan.com/SPstocks.csv"
# Option A: Read S from url
# S <- as.character(read.csv(url, header = FALSE)[,1])
# Option B: for testing read a S-test.R CSV file with shorter stock tickers
S <- c("MMM", "ACN", "BLK", "HRB", "BWA", "BF-B")
#Change '-' for '_'. Quandl needs it
#Method 1, generic
S <- gsub("-", "_", S)
setwd(rootdir)
dump(list = "S", "S.R")
#####
#### 2.4
# Load "invalid.R" file if available
invalid <- character(0)
setwd(rootdir)
if("invalid.R" %in% list.files()) source("invalid.R")
# Find all symbols not in directory and not missing
setwd(datadir)
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
#load new column names
column_names <- c("Open", "High", "Low", "Close", "Volume")
# Fetch symbols with quandl_get function, save as .csv or missing
source(paste0(functiondir, "quandl.R"))
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
setwd(rootdir)
dump(list = c("invalid"), "invalid.R")
# Clears R environment except for path variables and functions
rm( list = setdiff( ls(), c(" rootdir", "libdir", "datadir", "quandl_get", "column_names")))
gc()
####
#### 2.5
setwd(datadir)
S <- sub(".csv", "", list.files())
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
####
#### 2.6 update method with quandl_get function
# To prove that this works, at this point you might want to delete some rows in
# any of the csv files under stockdata.
# force system time to "EST"
Sys.setenv(TZ="EST")
currentTime <- Sys.time()
for(i in S){
# Store greatest date within DATA for symbol i
maxdate <- max(index(DATA[[i]])[nrow(DATA[[i]])])
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 40.25){
# Push the maxdate forward one day
maxdate <- strptime(maxdate, "%Y-%m-%d") + 86400
weekend <- sum(c("Saturday", "Sunday") %in%
weekdays(c(maxdate, currentTime))) == 2
if(!weekend){
# if !weekend then start_date for quandl = maxdate
start_date = as.character(maxdate)
df <- quandl_get(i, start_date = start_date)
colnames(df) <- column_names
if(!is.null(df)){
if(all(!is.na(df)) & nrow(df) > 0){
# df <- df[nrow(df):1] # not needed, is type = "zoo"
# write csv file with new data, duplicates might exist
write.zoo(df, file = paste0(i, ".csv"),
row.names = FALSE, col.names = FALSE, append = TRUE)
DATA[[i]] <- rbind(DATA[[i]], df)
# just in case, sort by index. Remove duplicates?
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
}
}
}
}
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir <- file.path(rootdir, "lib//")
srcdir <- file.path(rootdir, "src//")
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir <- file.path(rootdir, "lib//")
srcdir <- file.path(rootdir, "src//")
install.packages(c("callr", "digest", "knitr", "openssl", "pracma", "reprex", "rprojroot", "tidyr", "viridis", "viridisLite", "XLConnect", "yaml"))
library(quantmod)                                                               # Load quantmod
library(tidyquant)                                                              # Loads tidyquant, tidyverse, lubridate, quantmod, TTR, and xts
library(TTR)                                                                    # Technical Trading Rules package
# SPL Processing -----------------------------------------------------------------------------------
SPL <- tq_get("SPL.AX")                                                         # Get SPL Stock Prices
SPL<-SPL[complete.cases(SPL),]                                                  # Delete NA
date_1 <- SPL$date                                                              # Create date variable
date <- date_1 + 1
key<-paste(as.character(format(date, "%Y")), as.character(format(date, "%m")),  # Create Key
as.character(format(date, "%d")), "spl", sep = "")
# Create Table -------------------------------------------------------------------------------------
tblPrice <- data.frame(key,SPL,"spl", date)                                     # Create Stock Price Table
# Delete Table NA ----------------------------------------------------------------------------------
tblPrice<-tblPrice[complete.cases(tblPrice),]                                   # Delete tblPrice NA's
# Rename Table columns -----------------------------------------------------------------------------
colnames(tblPrice) <- c("key","date-1", "open", "high", "low", "close", "volume",
"adjusted", "symbol", "date" )                                              # Rename tblPBands Table Columns
# Indexing  ----------------------------------------------------------------------------------------
tblPrice <- tibble::rowid_to_column(tblPrice, "Index")                          # Add Index to tblPrice
# Reorder  -----------------------------------------------------------------------------------------
tblPrice <- tblPrice[, c(2, 1, 11, 3, 10, 4, 5, 6, 7, 9, 8)]                    # Reorder tblPrice columns
# Create Simulation Matrix  -----------------------------------------------------------------------------------
mtxDeltPrice <- data.matrix(Delt(tblPrice$adjusted, k=1:200))                   # Create Adjusted Price Matrix
mtxDeltPrice[is.infinite(mtxDeltPrice) | is.na(mtxDeltPrice)] <- 0              # Check for inf or na's and convert to 0
rownames(mtxDeltPrice) <- rownames(mtxDeltPrice, do.NULL = FALSE, prefix = "")  # Add Row Name - Index Value
colnames(mtxDeltPrice) <- c(1:200)                                              # Add Column Name Value 1 - 200
# Create Simulation Data Frame  -----------------------------------------------------------------------------
tblDeltPrice <- data.frame(mtxDeltPrice)
sprintf("x%03d", tblDeltPrice)
# Top / Bottom n Values  ------------------------------------------------------------------------------------
tblDeltPriceBotN <- data.frame(head(sort(mtxDeltPrice), 50))                    # Bottom N Prices
tblDeltPriceBotIdx<- data.frame(which(mtxDeltPrice<=sort(mtxDeltPrice,          # Bottom N Prices Index
decreasing = F)[50], arr.ind = T))
tblDeltPriceTopN <- data.frame(head(sort(mtxDeltPrice,decreasing = TRUE), 50))  # Top N Prices
tblDeltPriceTopIdx<- data.frame(which(mtxDeltPrice>=sort(mtxDeltPrice,          # Top N Prices Index
decreasing = T)[50], arr.ind = T))
View(tblDeltPriceBotIdx)
View(tblDeltPriceBotN)
View(tblDeltPriceTopIdx)
View(tblDeltPriceTopN)
View(tblDeltPrice)
rm(list=ls())
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
Admissions - Freshman Pell recipients Report
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
atdir
unlink
unlink(atdir)
atdir
unlink(atdir, recursive = TRUE)
tempdir()
testit <- unlink(atdir)
testit
dir.create("./AutoTrading")
x <- dir.create("./AutoTrading")
x <- dir.create("./AutoTrading2")
x
z <- file.append(x)
rootdir <- rprojroot::find_rstudio_root_file()
atdir   <- file.path(rootdir, "AutoTrading")
testdir <- dir.exists(file.path(rootdir, atdir))
subDir <- dir.create("./Test")
subDir
subDir <- dir.create("./Glen")
isGlen <- dir.exists(file.path(rootdir,subDir))
isGlen
subDir
dir.create("./Test")
mainDir <- "."
mainDir
mainDir <- "~"
mainDir
mainDir <- "."
subDir <- "Test"
dir.exists(file.path(mainDir,subDir))
browser()                                                                       # Set Debugger
quit(())
quit()
debuggingState(on=FALSE)
exit
q
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
file.path(mainDir, subDir)
atdir
unlink("C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/AutoTrading", recursive = TRUE)
library("ProjectTemplate"); load.project()
atdir
atdir   <- file.path(rootdir, "AutoTrading")
atdir
unlink(atdir, recursive=TRUE)
Q
library("ProjectTemplate"); load.project()
atdir
atdir  <- file.path(mainDir, "AutoTrading")
atdir
atdir  <- file.path(rootdir, "AutoTrading")
atdir
unlink(atdir,recursive=TRUE)
Q
library("ProjectTemplate"); load.project()
#### 2.4
# Load "invalid.R" file if available
invalid <- character(0)
# setwd(rootdir)
if("invalid.R" %in% list.files()) source("invalid.R")
# Find all symbols not in directory and not missing
# setwd(datadir)
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
#load new column names
column_names <- c("Open", "High", "Low", "Close", "Volume")
# Fetch symbols with quandl_get function, save as .csv or missing
source(paste0(libdir, "quandl.R"))
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
# setwd(rootdir)
dump(list = c("invalid"), "invalid.R")
# Clears R environment except for path variables and functions
rm( list = setdiff( ls(), c(" rootdir", "libdir", "datadir", "quandl_get", "column_names")))
gc()
#### 2.5
# setwd(datadir)
S <- sub(".csv", "", list.files())
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
library("ProjectTemplate"); load.project()
atdir
unlink(atdir)
atdir
unlink("C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/AutoTrading", recursive = TRUE)
atdir
nchar(atdir)
install('Rbase')
install.packages('Rbase')
substr(atdir, 1, nchar(atdir)-1)
library("ProjectTemplate"); load.project()
browser()                                                                       # Set Debugger
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir  <- file.path(rootdir, "lib//")
srcdir  <- file.path(rootdir, "src//")
mainDir <- "."
subDir <- "AutoTrading"
atdir  <- file.path(rootdir, "AutoTrading")
if(dir.exists(file.path(mainDir, subDir))) {
unlink(substr(atdir, 1, nchar(atdir)-1), recursive=TRUE)
# if(dir.exists(atdir)) {
#   unlink("./AutoTrading", recursive=TRUE)                                    # Original Code
#   unlink(file.path(mainDir, subDir), recursive=TRUE)
#   unlink(atdir, recursive=TRUE)
}
dir.create("./AutoTrading")
dir.create("./AutoTrading/stockdata")
dir.create("./Autotrading/functions")
####Listing 2.1: Setting Path Variables
# rootdir <- "~/Autotrading"
atdir <- file.path(rootdir, "AutoTrading//")
datadir <- "./AutoTrading/stockdata/"
functiondir <- "./AutoTrading/functions/"
####
####
Q
browser()                                                                       # Set Debugger
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir  <- file.path(rootdir, "lib//")
srcdir  <- file.path(rootdir, "src//")
mainDir <- "."
subDir <- "AutoTrading"
atdir  <- file.path(rootdir, "AutoTrading")
if(dir.exists(file.path(mainDir, subDir))) {
unlink(substr(atdir, 1, nchar(atdir)-1), recursive=TRUE)
# if(dir.exists(atdir)) {
#   unlink("./AutoTrading", recursive=TRUE)                                    # Original Code
#   unlink(file.path(mainDir, subDir), recursive=TRUE)
#   unlink(atdir, recursive=TRUE)
}
if(dir.exists(file.path(mainDir, subDir))) {
unlink(substr(atdir, 1, nchar(atdir)-1), recursive=TRUE)
# if(dir.exists(atdir)) {
#   unlink("./AutoTrading", recursive=TRUE)                                    # Original Code
#   unlink(file.path(mainDir, subDir), recursive=TRUE)
#   unlink(atdir, recursive=TRUE)
}
atdir
unlink(substr(atdir, 1, nchar(atdir)-1), recursive=TRUE)
unlink(atdir, recursive = truelength())Q
library("ProjectTemplate"); load.project()
srcdir  <- file.path(rootdir, "src//")
library("ProjectTemplate"); load.project()
unlink(atdir, recursive=TRUE)
unlink(atdir, recursive=TRUE)
atdir
unlink("C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/AutoTrading", recursive = TRUE)
deleteDir <- "C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/AutoTrading"
delDir-1 <-substr(atdir, 1, nchar(atdir)-1)
delDir_1 <-substr(atdir, 1, nchar(atdir)-1)
atdir  <- file.path(rootdir, "AutoTrading")
delDir_1 <-substr(atdir, 1, nchar(atdir)-1)
unlink(delDir_1, recursive = TRUE)
unlink(delDir_1, recursive = TRUE)
delDir <- "C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/AutoTrading"
unlink(delDir, recursive = TRUE)
install.packages("filesstrings")
library("ProjectTemplate"); load.project()
browser()                                                                       # Set Debugger
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir  <- file.path(rootdir, "lib//")
srcdir  <- file.path(rootdir, "src//")
mainDir <- "."
subDir <- "AutoTrading"
atdir  <- file.path(rootdir, subDir)
dir.remove(atdir)
browser
browser
browser
browser
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir  <- file.path(rootdir, "lib//")
srcdir  <- file.path(rootdir, "src//")
mainDir <- "."
subDir <- "AutoTrading"
atdir  <- file.path(rootdir, subDir)
if(dir.exists(file.path(mainDir, subDir))) {
dir.remove(atdir)
}
if(dir.exists(file.path(mainDir, subDir))) {
dir.remove(atdir)
}
if(dir.exists(file.path(mainDir, subDir))) {
dir.remove(atdir)
}
getwd()
setwd(rootdir)
getwd()
dir.create("./AutoTrading")
dir.create("./AutoTrading/stockdata")
dir.create("./Autotrading/functions")
rootdir <- rprojroot::find_rstudio_root_file()
datadir <- file.path(rootdir, "data//")
libdir  <- file.path(rootdir, "lib//")
srcdir  <- file.path(rootdir, "src//")
getwd()
mainDir <- "."
subDir <- "AutoTrading"
atdir  <- file.path(rootdir, subDir)
atdir
x -> dir.exists(file.path(mainDir, subDir))
x -> dir.exists(file.path(mainDir, subDir))
dir.exists(file.path(mainDir, subDir))
dir.exists(file.path(atdir))
dir.exists(file.path(atdir))
dir.exists(file.path(mainDir, subDir))
dir.exists(file.path(atdir))
if(dir.exists(file.path(atdir)){
dir.remove(atdir)
}
if(dir.exists(file.path(mainDir, subDir))) {
dir.remove(atdir)
}
if(dir.exists(file.path(atdir))){
dir.remove(atdir)
}
