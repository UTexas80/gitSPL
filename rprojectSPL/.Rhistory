View(quandl_get)
View(yahoo)
yahoo
library('ProjectTemplate); load.project()
library('ProjectTemplate); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
column_names <- c("Open", "High", "Low", "Close", "Volume")
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
dump(list = c("invalid"), "invalid.R")
S <- sub(".csv", "", list.files())
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
View(DATA)
Sys.setenv(TZ="EST")
currentTime <- Sys.time()
for(i in S){
# Store greatest date within DATA for symbol i
maxdate <- max(index(DATA[[i]])[nrow(DATA[[i]])])
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 40.25){
# Push the maxdate forward one day
maxdate <- strptime(maxdate, "%Y-%m-%d") + 86400
weekend <- sum(c("Saturday", "Sunday") %in%
weekdays(c(maxdate, currentTime))) == 2
if(!weekend){
# if !weekend then start_date for quandl = maxdate
start_date = as.character(maxdate)
df <- quandl_get(i, start_date = start_date)
colnames(df) <- column_names
if(!is.null(df)){
if(all(!is.na(df)) & nrow(df) > 0){
# df <- df[nrow(df):1] # not needed, is type = "zoo"
# write csv file with new data, duplicates might exist
write.zoo(df, file = paste0(i, ".csv"),
row.names = FALSE, col.names = FALSE, append = TRUE)
DATA[[i]] <- rbind(DATA[[i]], df)
# just in case, sort by index. Remove duplicates?
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
}
}
}
}
View(DATA)
column_names <- c("date", Open", "High", "Low", "Close", "Volume")
column_names <- c("Open", "High", "Low", "Close", "Volume")
column_names <- c("date", "Open", "High", "Low", "Close", "Volume")
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
# setwd(config$root)
dump(list = c("invalid"), "invalid.R")
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
# I added this code
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
View(DATA)
View(DATA)
View(DATA)
View(DATA)
if( length (toload) != 0){
for(i in 1: length (toload)){
df <- yahoo (toload[i])
if(! is.null (df)) {
write.csv (df[ nrow (df):1], file = paste0 (toload[i], ".csv"),
row.names = FALSE)
} else {
invalid <- c (invalid, toload[i])
}
}
}
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
write.csv(df[nrow(df):1], file = paste0(toload[i], ".csv"),
row.names = FALSE)
} else {
invalid <- c(invalid, toload[i])
}
}
}
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
S <- sub(".csv", "", list.files())
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
View(BWA)
View(BF.B)
library("ProjectTemplate"); load.project()
View(MMM)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
View(BWA)
library("ProjectTemplate"); load.project()
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- (DATA[[i]])[order(DATA[[i]][["Date"]], decreasing = FALSE)]
}
yahoo <- function(S, current = TRUE,
a = 0, b = 1, c = 2000, d, e, f,
g = "d")
{
cat("Hello, Yahoo!\n")
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
require(data.table)
tryCatch(
suppressWarnings(
fread(paste0("http://ichart.yahoo.com/table.csv",
"?s=", sym,
"&a=", a,
"&b=", b,
"&c=", c,
"&d=", d,
"&e=", e,
"&f=", f,
"&g=", g,
"&ignore=.csv"), sep = ",")),
error = function(e) NULL
)
cat("Goodbye, Yahoo!\n")
}
for(i in S){
suppressWarnings(
DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- (DATA[[i]])[order(DATA[[i]][["Date"]], decreasing = FALSE)]
}
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
toload <- setdiff (S[! paste0 (S, ".csv") %in% list.files ()], invalid)
S
invalid <- character (0)
toload <- setdiff (S[! paste0 (S, ".csv") %in% list.files ()], invalid)
yahoo(S)
if( length (toload) != 0){
for(i in 1: length (toload)){
df <- yahoo (toload[i])
if(! is.null (df)) {
write.csv (df[ nrow (df):1], file = paste0 (toload[i], ".csv"),
row.names = FALSE)
} else {
invalid <- c (invalid, toload[i])
}
}
}
View(config)
df
current
current=true
current
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
S <- Sys.glob("*.csv")
S <- c("MMM", "ACN", "BLK", "HRB", "BWA", "BF-B")
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
S <- c("MMM", "ACN", "BLK", "HRB", "BWA", "BF-B")
S <- gsub("-", "_", S)
invalid <- character(0)
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
library("ProjectTemplate"); load.project()
print(l.out$df.tickers)
View(l.out)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
print(l.out$df.control)
print(l.out$df.tickers)
l.outdf$.control
symbols <- c("MSFT", "C", "VIA/B", "MMM")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
View(data)
datetemp <- sort ( unique ( unlist ( sapply (data, function(v) v[["Date"]]))))
symbols <- c("SPL.AX", "SPHRF", "SPHRY")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
symbols <- c("SPL.AX", "SPHRF", "SPHRY")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
symbols <- c("MSFT", "C", "VIA/B", "MMM")
# symbols <- c("SPL.AX", "SPHRF", "SPHRY")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
library(tidyquant)
symbols <- c("MSFT", "C", "VIA/B", "MMM")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
print(l.out$df.control)
print(l.out$df.tickers)
l.out
l.out$df.tickers
l.out$A
View(data)
?subset
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
library(dplyr)
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
library("ProjectTemplate"); load.project()
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
library("ProjectTemplate"); load.project()
l.out$df.tickers
price.close
l.out$df.price.close
View(data)
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
library("ProjectTemplate"); load.project()
View(data)
sapply (data, function(v) v[["date"]])
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("BatchGetSymbols", lib.loc="~/R/win-library/3.4")
install.packages(c("acs", "BH", "callr", "devtools", "dlnm", "dplyr", "filesstrings", "geosphere", "githubinstall", "knitr", "lubridate", "matrixStats", "microbenchmark", "profvis", "pryr", "purrr", "raster", "rgdal", "rgeos", "sf", "sp", "testthat", "tidygraph", "tidyr", "tidyverse", "tigris", "tseries", "units", "viridis", "XML"))
detach("package:BatchGetSymbols", unload=TRUE)
devtools::install_github('msperlin/BatchGetSymbols')
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
print(l.out$df.control)
print(l.out$df.tickers)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
print(l.out$df.tickers)
library("ProjectTemplate"); load.project()
print(l.out$df.tickers)
print(l.out$df.control)
View(data)
View(l.out)
l.out[["df.tickers"]][["ret.adjusted.prices"]]
l.out[["df.tickers"]][["price.open"]]
l.out[["df.tickers"]][["price.adjusted"]]
l.out[["df.tickers"]][["volume"]]
l.out[["df.tickers"]][["ticker"]]
library("ProjectTemplate"); load.project()
is.tibble(data)
library("tidyquant", lib.loc="~/R/win-library/3.4")
library("tidygraph", lib.loc="~/R/win-library/3.4")
install.packages(c("dbplyr", "forcats", "knitr", "rlang", "stringr", "tidyquant", "XML"))
library("TTR", lib.loc="~/R/win-library/3.4")
library("tidyquant", lib.loc="~/R/win-library/3.4")
library("ProjectTemplate"); load.project()
is.tibble(x)
is.tibble(data)
data(data)
data
args(SharpeRatio)
args(rollapply)
n <-20
meanseries ,_ rollapply(DATA[["Close"]][,"SPL.AX"], width = n, FUN = mean, by.column=TRUE,fill=NA, align = "right")
meanseries ,_ rollapply(DATA[["Close"]]["SPL.AX"], width = n, FUN = mean, by.column=TRUE,fill=NA, align = "right")
meanseries ,_ rollapply(DATA[["Close"]]["SPL.AX"], width = n, FUN = mean, by.column=TRUE, fill=NA, align = "right")
meanseries <- rollapply(DATA[["Close"]]["SPL.AX"], width = n, FUN = mean, by.column=TRUE, fill=NA, align = "right")
meanseries <- rollapply(data[["Close"]]["SPL.AX"], width = n, FUN = mean, by.column=TRUE, fill=NA, align = "right")
getwd()
setwd(O:)
setwd
setwd(O:/)
setwd(O:\)
setwd("S:/RomanceLangGrants")
getwd()
library('ProjectTemplate')
create.project('romanceLangGrants')
getwd
getwd()
getwd()
setwd
setwd
setwd( "s:/")
getwd()
reate.project('rRomanceLangGrants')
create.project('rRomanceLangGrants')
getwd()
library('ProjectTemplate')
create.project('_RomanceLangGrants')
setwd(s:/_RomanceLangGrants)
setwd("s:/_RomanceLangGrants")
getwd()
install_github("mkac")
library(devtools)
install_github("nxskok/mkac")
devtools::install_github("ropenscilabs/styles")
devtools::install_github("fkeck/editheme")
install_github("r-lib/later")
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
install.packages(c("dplyrAssist", "qqplotr", "knitr", "knitrBootstrap", "styler"))
source("https://install-github.me/r-lib/remotes")
remotes::install_github("REditorSupport/languageserver")
install.packages("curl")
devtools::install_github('systematicinvestor/SIT.date')
devtools::install_github('systematicinvestor/SIT.date')
install.packages("curl")
library("ProjectTemplate"); load.project()
install.packages("curl")
uninstall.packages("curl")
remove.packages("curl")
install.packages("curl")
install.packages("curl")
.libPaths()
remove.packages("curl")
install.packages("curl")
devtools::install_github('systematicinvestor/SIT.date')
devtools::install_github("systematicinvestor/SIT")
library(curl)
curl_download('https://github.com/systematicinvestor/SIT/raw/master/SIT.tar.gz', 'sit',mode = 'wb',quiet=T)
install.packages('sit', repos = NULL, type='source')
library("ProjectTemplate"); load.project()
install.packages("editheme")
library("ProjectTemplate"); load.project()
install.packages("later")
install.packages("dplyrAssist")
install.packages("knitrBootstrap")
install.packages("qqplotr")
install.packages("styler")
install.packages("fTrading")
install.packages("fTrading")
library(devtools)
devtools::install_github("benmarwick/analyse_large_text_file.R")
devtools::install_github("benmarwick/analyse_large_text_file")
tidyverse_update()
library("tidyverse", lib.loc="C:/Program Files/Microsoft/R Open/R-3.4.3/library")
detach("package:tidyverse", unload=TRUE)
library("tidyverse")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot::mpg
ggplot2:mpg
ggplot2
tidyvers::ggplot2
tidyverse::ggplot2
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
x <- "hello
""
x <- "hello"
x <- "hello"
my_variable <- 10
my_varıable
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(nycflights16)
vignette("window-functions")
