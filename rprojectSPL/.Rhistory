View(DATA)
View(DATA)
config$atdir
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
View(config)
View(config)
library("ProjectTemplate"); load.project()
View(config)
cache(SP500)
cache(SP500)
cache('SP500')
library("ProjectTemplate"); load.project()
cache('DATA')
getwd()
setwd('cachedir')
setwd(cachedir)
setwd(config$cachedir)
config$cachedir
getwd()
setwd(""C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/cache")
setwd(C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/cache")
getwd()
setwd( "C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/data")
setwd( "C:/Users/gfalk/OneDrive - University of Georgia/SPL/rprojectSPL/cache")
getwd
getwd()
cache("DATA")
getwd()
cache('DATA')
cache(DATA)
getwd()
View(DATA)
View(DATA)
View(DATA)
View(DATA)
DATA
library(zoo)
datetemp <- data.frame(datetemp, stringsAsFactors = FALSE)
datetemp <- sort(unique(unlist(sapply(DATA, function(v) v[["Date"]]))))
library("ProjectTemplate"); load.project()
View(DATA)
View(project.info)
library("ProjectTemplate"); load.project()
warnings()
library(zoo)
require(zoo)
datetemp <- sort(unique(unlist(sapply(DATA, function(v) v[["Date"]]))))
library("ProjectTemplate"); load.project()
atetemp <- sort(unique(unlist(sapply(DATA, function(v) v[["Date"]]))))
library("ProjectTemplate"); load.project()
View(project.info)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
cache(DATA)
setwd(config$cachedir)
getwd
getwd()
cache(DATA)
getwd()
cache(SP500)
library("ProjectTemplate"); load.project()
getwd()
View(DATA)
View(DATA)
DAATA
DATA
DATA$ACN
DATA$MMM
DATA$BF_B
library("ProjectTemplate"); load.project()
DATA$ACN
View(config)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
debug()
# Listing 2.2
yahoo <- function(sym, current = TRUE,
a = 0, b = 1, c = 2000, d, e, f,
g = "d")
{
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
require(data.table)
tryCatch(
suppressWarnings(
fread(paste0("http://ichart.yahoo.com/table.csv",
"?s=", sym,
"&a=", a,
"&b=", b,
"&c=", c,
"&d=", d,
"&e=", e,
"&f=", f,
"&g=", g,
"&ignore=.csv"), sep = ",")),
error = function(e) NULL
)
}
# Listing 2.2
yahoo <- function(sym, current = TRUE,
a = 0, b = 1, c = 2000, d, e, f,
g = "d")
{
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
require(data.table)
tryCatch(
suppressWarnings(
fread(paste0("http://ichart.yahoo.com/table.csv",
"?s=", sym,
"&a=", a,
"&b=", b,
"&c=", c,
"&d=", d,
"&e=", e,
"&f=", f,
"&g=", g,
"&ignore=.csv"), sep = ",")),
error = function(e) NULL
)
}
# Listing 2.2
yahoo <- function(sym, current = TRUE,
a = 0, b = 1, c = 2000, d, e, f,
g = "d")
{
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
require(data.table)
tryCatch(
suppressWarnings(
fread(paste0("http://ichart.yahoo.com/table.csv",
"?s=", sym,
"&a=", a,
"&b=", b,
"&c=", c,
"&d=", d,
"&e=", e,
"&f=", f,
"&g=", g,
"&ignore=.csv"), sep = ",")),
error = function(e) NULL
)
}
library("ProjectTemplate"); load.project()
View(config)
config$srcdir
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
View(yahoo)
View(quandl_get)
library("ProjectTemplate"); load.project()
View(quandl_get)
View(yahoo)
yahoo
library('ProjectTemplate); load.project()
library('ProjectTemplate); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
column_names <- c("Open", "High", "Low", "Close", "Volume")
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
dump(list = c("invalid"), "invalid.R")
S <- sub(".csv", "", list.files())
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
View(DATA)
Sys.setenv(TZ="EST")
currentTime <- Sys.time()
for(i in S){
# Store greatest date within DATA for symbol i
maxdate <- max(index(DATA[[i]])[nrow(DATA[[i]])])
if(as.numeric(difftime(currentTime, maxdate, units = "hours")) >= 40.25){
# Push the maxdate forward one day
maxdate <- strptime(maxdate, "%Y-%m-%d") + 86400
weekend <- sum(c("Saturday", "Sunday") %in%
weekdays(c(maxdate, currentTime))) == 2
if(!weekend){
# if !weekend then start_date for quandl = maxdate
start_date = as.character(maxdate)
df <- quandl_get(i, start_date = start_date)
colnames(df) <- column_names
if(!is.null(df)){
if(all(!is.na(df)) & nrow(df) > 0){
# df <- df[nrow(df):1] # not needed, is type = "zoo"
# write csv file with new data, duplicates might exist
write.zoo(df, file = paste0(i, ".csv"),
row.names = FALSE, col.names = FALSE, append = TRUE)
DATA[[i]] <- rbind(DATA[[i]], df)
# just in case, sort by index. Remove duplicates?
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
}
}
}
}
View(DATA)
column_names <- c("date", Open", "High", "Low", "Close", "Volume")
column_names <- c("Open", "High", "Low", "Close", "Volume")
column_names <- c("date", "Open", "High", "Low", "Close", "Volume")
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
# setwd(config$root)
dump(list = c("invalid"), "invalid.R")
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
# I added this code
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
View(DATA)
View(DATA)
View(DATA)
View(DATA)
if( length (toload) != 0){
for(i in 1: length (toload)){
df <- yahoo (toload[i])
if(! is.null (df)) {
write.csv (df[ nrow (df):1], file = paste0 (toload[i], ".csv"),
row.names = FALSE)
} else {
invalid <- c (invalid, toload[i])
}
}
}
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
write.csv(df[nrow(df):1], file = paste0(toload[i], ".csv"),
row.names = FALSE)
} else {
invalid <- c(invalid, toload[i])
}
}
}
if(length(toload) != 0){
for(i in 1:length(toload)){
df <- quandl_get(toload[i])
if(!is.null(df)) {
#changing names
colnames(df) <- column_names
# as zoo objects downloaded, row names must be TRUE. Use write ZOO
write.zoo(df, file = paste0(toload[i], ".csv"))
} else {
invalid <- c(invalid, toload[i])
}
}
}
S <- sub(".csv", "", list.files())
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
DATA <- list()
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
for(i in S){
suppressWarnings(
# read as Zoo instead of fread
# DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- read.zoo(paste0(i, ".csv"), header = TRUE)
)
# sort by index
DATA[[i]] <- zoo(DATA[[i]], order.by = index(DATA[[i]]))
}
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
View(BWA)
View(BF.B)
library("ProjectTemplate"); load.project()
View(MMM)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
View(BWA)
library("ProjectTemplate"); load.project()
require(data.table)
DATA <- list()
for(i in S){
suppressWarnings(
DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- (DATA[[i]])[order(DATA[[i]][["Date"]], decreasing = FALSE)]
}
yahoo <- function(S, current = TRUE,
a = 0, b = 1, c = 2000, d, e, f,
g = "d")
{
cat("Hello, Yahoo!\n")
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
require(data.table)
tryCatch(
suppressWarnings(
fread(paste0("http://ichart.yahoo.com/table.csv",
"?s=", sym,
"&a=", a,
"&b=", b,
"&c=", c,
"&d=", d,
"&e=", e,
"&f=", f,
"&g=", g,
"&ignore=.csv"), sep = ",")),
error = function(e) NULL
)
cat("Goodbye, Yahoo!\n")
}
for(i in S){
suppressWarnings(
DATA[[i]] <- fread(paste0(i, ".csv"), sep = ","))
DATA[[i]] <- (DATA[[i]])[order(DATA[[i]][["Date"]], decreasing = FALSE)]
}
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
toload <- setdiff (S[! paste0 (S, ".csv") %in% list.files ()], invalid)
S
invalid <- character (0)
toload <- setdiff (S[! paste0 (S, ".csv") %in% list.files ()], invalid)
yahoo(S)
if( length (toload) != 0){
for(i in 1: length (toload)){
df <- yahoo (toload[i])
if(! is.null (df)) {
write.csv (df[ nrow (df):1], file = paste0 (toload[i], ".csv"),
row.names = FALSE)
} else {
invalid <- c (invalid, toload[i])
}
}
}
View(config)
df
current
current=true
current
if(current){
f <- as.numeric(substr(as.character(Sys.time()), start = 1, stop = 4))
d <- as.numeric(substr(as.character(Sys.time()), start = 6, stop = 7)) - 1
e <- as.numeric(substr(as.character(Sys.time()), start = 9, stop = 10))
}
S <- Sys.glob("*.csv")
S <- c("MMM", "ACN", "BLK", "HRB", "BWA", "BF-B")
S <- Sys.glob("*.csv")
S <- sub(".csv", "", S)
S <- c("MMM", "ACN", "BLK", "HRB", "BWA", "BF-B")
S <- gsub("-", "_", S)
invalid <- character(0)
toload <- setdiff(S[!paste0(S, ".csv") %in% list.files()], invalid)
library("ProjectTemplate"); load.project()
print(l.out$df.tickers)
View(l.out)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
print(l.out$df.control)
print(l.out$df.tickers)
l.outdf$.control
symbols <- c("MSFT", "C", "VIA/B", "MMM")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
View(data)
datetemp <- sort ( unique ( unlist ( sapply (data, function(v) v[["Date"]]))))
symbols <- c("SPL.AX", "SPHRF", "SPHRY")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
symbols <- c("SPL.AX", "SPHRF", "SPHRY")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
symbols <- c("MSFT", "C", "VIA/B", "MMM")
# symbols <- c("SPL.AX", "SPHRF", "SPHRY")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
library(tidyquant)
symbols <- c("MSFT", "C", "VIA/B", "MMM")
# Download data in tidy format.
# Will remove VIA/B and warn you.
data <- tq_get(symbols)
# Ticker symbols as column names for closing prices
data %>%
select(.symbol, date, close) %>%
spread(key = .symbol, value = close)
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
library("ProjectTemplate"); load.project()
print(l.out$df.control)
print(l.out$df.tickers)
l.out
l.out$df.tickers
l.out$A
View(data)
?subset
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
library(dplyr)
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
library("ProjectTemplate"); load.project()
data %>% mutate_cond(symbol == "SPL.AX", date = date + 1)
